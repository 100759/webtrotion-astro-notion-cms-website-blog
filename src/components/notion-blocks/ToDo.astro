---
import * as interfaces from "../../lib/interfaces.ts";
import { convertToTailwindColor } from "../../lib/style-helpers.ts";
import RichText from "./RichText.astro";
import NotionBlocks from "../NotionBlocks.astro";

export interface Props {
	block: interfaces.Block;
	headings: interfaces.Block[];
}

const { block, headings } = Astro.props;
---

<div class="to-do leading-7 pl-2">
  {
    block.ListItems.filter((b: interfaces.Block) => b.Type === "to_do").map(
      (b: interfaces.Block, index) => (
        <div key={index} class="mb-2">
          <div class={`flex items-start ${convertToTailwindColor(b.ToDo.Color)}`}>
            {/* Flex container for the checkbox and text */}
            <div class="pt-1 pr-2">
              {/* Padding for the checkbox */}
              <input
                type="checkbox"
                checked={b.ToDo.Checked}
                disabled
                class="checkbox h-4 w-4 rounded border-gray-300 bg-gray-100 text-blue-600 focus:ring-2 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:focus:ring-blue-600"
              />
            </div>
            <div class="flex-1">
              {/* Container for text, taking up the rest of the space */}
              {b.ToDo.RichTexts.map((richText: interfaces.RichText) => {
                if (b.ToDo.Checked) {
                  return (
                  <span class="line-through block">
                      {/* Block element for the text */}
                      <RichText richText={richText} />
                    </span>
                  );
                }
                return <RichText richText={richText} class="block" />;
              })}
            </div>
          </div>
          {b.HasChildren && (
            <div class="mt-1">
              {/* Margin for spacing between the to-do and its children */}
              <NotionBlocks blocks={b.ToDo.Children} headings={headings} />
            </div>
          )}
        </div>
      ),
    )
  }
</div>


